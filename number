"""
File: linkedbst.py
Author: Ken Lambert
"""

from abstractcollection import AbstractCollection
from bstnode import BSTNode
from linkedstack import LinkedStack
from math import log
import time
import random

class LinkedBST(AbstractCollection):
    """An link-based binary search tree implementation."""

    def __init__(self, sourceCollection=None):
        """Sets the initial state of self, which includes the
        contents of sourceCollection, if it's present."""
        self._root = None
        AbstractCollection.__init__(self, sourceCollection)

    # Accessor methods
    def __str__(self):
        """Returns a string representation with the tree rotated
        90 degrees counterclockwise."""

        def recurse(node, level):
            strn = ""
            if node:
                strn += recurse(node.right, level + 1)
                strn += "| " * level
                strn += str(node.data) + "\n"
                strn += recurse(node.left, level + 1)
            return strn

        return recurse(self._root, 0)

    def __iter__(self):
        """Supports a preorder traversal on a view of self."""
        if not self.isEmpty():
            stack = LinkedStack()
            stack.push(self._root)
            while not stack.isEmpty():
                node = stack.pop()
                yield node.data
                if node.right:
                    stack.push(node.right)
                if node.left:
                    stack.push(node.left)

    def preorder(self):
        """Supports a preorder traversal on a view of self."""
        return None

    def inorder(self):
        """Supports an inorder traversal on a view of self."""
        lyst = list()

        def recurse(node):
            if node:
                recurse(node.left)
                lyst.append(node.data)
                recurse(node.right)

        recurse(self._root)
        return iter(lyst)

    def postorder(self):
        """Supports a postorder traversal on a view of self."""
        return None

    def levelorder(self):
        """Supports a levelorder traversal on a view of self."""
        return None

    def __contains__(self, item):
        """Returns True if target is found or False otherwise."""
        return self.find(item) is not None

    def find(self, item):
        """If item matches an item in self, returns the
        matched item, or None otherwise."""

        def recurse(node):
            if node is None:
                return None
            elif item == node.data:
                return node.data
            elif item < node.data:
                return recurse(node.left)
            else:
                return recurse(node.right)

        return recurse(self._root)

    # Mutator methods
    def clear(self):
        """Makes self become empty."""
        self._root = None
        self._size = 0

    def add(self, item):
        """Adds item to the tree."""

        # Helper function to search for item's position
        def recurse(node):
            # New item is less, go left until spot is found
            if item < node.data:
                if node.left is None:
                    node.left = BSTNode(item)
                else:
                    recurse(node.left)
            # New item is greater or equal,
            # go right until spot is found
            elif node.right is None:
                node.right = BSTNode(item)
            else:
                recurse(node.right)
                # End of recurse

        # Tree is empty, so new item goes at the root
        if self.isEmpty():
            self._root = BSTNode(item)
        # Otherwise, search for the item's spot
        else:
            recurse(self._root)
        self._size += 1

    def remove(self, item):
        """Precondition: item is in self.
        Raises: KeyError if item is not in self.
        postcondition: item is removed from self."""
        if not item in self:
            raise KeyError("Item not in tree.""")
        # Helper function to adjust placement of an item
        def lift_max_in_left_subtree_to_top(top):
            # Replace top's datum with the maximum datum in the left subtree
            # Pre:  top has a left child
            # Post: the maximum node in top's left subtree
            #       has been removed
            # Post: top.data = maximum value in top's left subtree
            parent = top
            current_node = top.left
            while not current_node.right is None:
                parent = current_node
                current_node = current_node.right
            top.data = current_node.data
            if parent == top:
                top.left = current_node.left
            else:
                parent.right = current_node.left

        # Begin main part of the method
        if self.isEmpty():
            return None

        # Attempt to locate the node containing the item
        item_removed = None
        pre_root = BSTNode(None)
        pre_root.left = self._root
        parent = pre_root
        direction = 'L'
        current_node = self._root
        while not current_node is None:
            if current_node.data == item:
                item_removed = current_node.data
                break
            parent = current_node
            if current_node.data > item:
                direction = 'L'
                current_node = current_node.left
            else:
                direction = 'R'
                current_node = current_node.right

        # Return None if the item is absent
        if item_removed is None:
            return None

        # The item is present, so remove its node

        # Case 1: The node has a left and a right child
        #         Replace the node's value with the maximum value in the
        #         left subtree
        #         Delete the maximium node in the left subtree
        if not current_node.left is None \
                and not current_node.right is None:
            lift_max_in_left_subtree_to_top(current_node)
        else:

            # Case 2: The node has no left child
            if current_node.left is None:
                new_child = current_node.right

                # Case 3: The node has no right child
            else:
                new_child = current_node.left

                # Case 2 & 3: Tie the parent to the new child
            if direction == 'L':
                parent.left = new_child
            else:
                parent.right = new_child

        # All cases: Reset the root (if it hasn't changed no harm done)
        #            Decrement the collection's size counter
        #            Return the item
        self._size -= 1
        if self.isEmpty():
            self._root = None
        else:
            self._root = pre_root.left
        return item_removed

    def replace(self, item, new_item):
        """
        If item is in self, replaces it with newItem and
        returns the old item, or returns None otherwise."""
        probe = self._root
        while probe:
            if probe.data == item:
                old_data = probe.data
                probe.data = new_item
                return old_data
            elif probe.data > item:
                probe = probe.left
            else:
                probe = probe.right
        return None

    def height(self):
        '''
        Return the height of tree
        :return: int
        '''

        def height1(top):
            '''
            Helper function
            :param top:
            :return:
            '''
            return -1 if top is None else 1+max(height1(top.left), height1(top.right))

        return height1(self._root)


    def is_balanced(self):
        '''
        Return True if tree is balanced
        :return:
        '''
        def count_tops(top):
            """returns count of tops"""
            if top is None:
                return 0
            return count_tops(top.right) + count_tops(top.left) + 1
        top = self._root
        if top is None:
            return False
        else:
            number = count_tops(self._root)
            height = self.height()
            return height < (2*log(number+1) - 1)

    def range_find(self, low, high):
        """
        Returns a list of the items in the tree, where low <= item <= high.
        :param low:
        :param high:
        :return:
        """
        elements = []
        stack_ = LinkedStack()
        node = self._root

        while node or not stack_.isEmpty():
            while node:
                stack_.push(node)
                node = node.left
            node = stack_.pop()
            if low <= node.data <= high:
                elements.append(node.data)
            node = node.right
        return elements

    def rebalance(self):
        '''
        Rebalances the tree.
        :return:
        '''
        def _rebalance_(info):
            """Helper function for rebalancing the tree recursively.
            :param items: A sorted list of items.
            :param start: The start index of the sublist.
            :param end: The end index of the sublist.
            :return: The root node of the balanced subtree.
            """
            if not info:
                return None
            middle = len(info) //2
            node = BSTNode(info[middle])
            node.left = _rebalance_(info[:middle])
            node.right = _rebalance_(info[middle+1:])
            return node
        info = list(self)
        self.clear()
        self._root = _rebalance_(info)


    def successor(self, item):
        """
        Returns the smallest item that is larger than
        item, or None if there is no such item.
        :param item:
        :type item:
        :return:
        :rtype:
        """
        stack_ = LinkedStack()
        node = self._root
        successor = None

        while node or not stack_.isEmpty():
            while node:
                stack_.push(node)
                node = node.left
            node = stack_.pop()
            if node.data > item:
                successor = node.data
                break
            node = node.right
        return successor

    def predecessor(self, item):
        """
        Returns the largest item that is smaller than
        item, or None if there is no such item.
        :param item:
        :type item:
        :return:
        :rtype:
        """
        stack_ = LinkedStack()
        node = self._root
        predecessor = None

        while node or not stack_.isEmpty():
            while node:
                stack_.push(node)
                node = node.right
            node = stack_.pop()
            if node.data < item:
                predecessor = node.data
                break
            node = node.left
        return predecessor


    def demo_bst(self, path):
        """
        Demonstration of efficiency binary search tree for the search tasks.
        :param path: The path to the text file with the dictionary.
        :type path: str
        """
        

        with open(path, 'r', encoding='utf-8') as file:
            lines = file.read().split()
            for line in lines:
                self.add(line)
            print(f"Loaded {len(lines)} words into the BST")
            print(f"Height: {self.height()}")
            print(f"Tree is balanced: {self.is_balanced()}")

            # Searching in a sorted list (list of words)
            start_time = time.time()
            for _ in range(10000):
                word = random.choice(lines)
                _ = word in lines
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"Time to search 10000 random words in a sorted list: {elapsed_time} seconds")

            # Searching in the BST (words added in alphabetical order)
            start_time = time.time()
            for _ in range(10000):
                word = random.choice(lines)
                _ = self.find(word)
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"Time to search 10000 random words in the BST (added in alphabetical order): {elapsed_time} seconds")
            # Shuffle the list of words
            random.shuffle(lines)
            self.clear()
            for line in lines:
                self.add(line)

            # Searching in the BST (words added randomly)
            start_time = time.time()
            for _ in range(10000):
                word = random.choice(lines)
                _ = self.find(word)
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"Time to search 10000 random words in the BST (added randomly): {elapsed_time} seconds")
            # Balancing the BST and searching
            self.rebalance()
            start_time = time.time()
            for _ in range(10000):
                word = random.choice(lines)
                _ = self.find(word)
            end_time = time.time()
            elapsed_time = end_time - start_time
            print(f"Time to search 10000 random words in the balanced BST: {elapsed_time} seconds")

            # Additional functionalities
            low = input('Enter the lower bound: ')
            high = input('Enter the upper bound: ')
            elements = self.range_find(low, high)
            print('Items:')
            for elem in elements:
                print(elem)

            print('Successor search:')
            s_item = input('Enter an item: ')
            succ = self.successor(s_item)
            if succ:
                print(f"Successor: {succ}")
            else:
                print('Not found')

            print('Predecessor search:')
            p_item = input('Enter an item: ')
            pre = self.predecessor(p_item)
            if pre:
                print(f"Predecessor: {pre}")
            else:
                print('Not found')

            # Clearing the BST
            self.clear()
            print('BST cleared.')
